import { Hooks } from './hooks';
import { AttachData } from './helpers/attachto';
import { VNodeStyle } from './modules/style';
import { On } from './modules/eventlisteners';
import { Attrs } from './modules/attributes';
import { Classes } from './modules/class';
import { Props } from './modules/props';
import { Dataset } from './modules/dataset';
import { Hero } from './modules/hero';
export declare type Key = string | number;
// vnode函数返回的js对象 可以有的这些内容
export interface VNode {
    // 选择器 h函数传递的第一个参数
    sel: string | undefined;
    // 跟模块的很多内容相关 类 属性 自定义属性 事件 样式 
    data: VNodeData | undefined;
    // 子节点 
    children: Array<VNode | string> | undefined;
    // 虚拟dom -》 转化为真实dom 信息存储到 elm里面去
    elm: Node | undefined;
    // 文本内容
    text: string | undefined;
    // diff算法优化时使用的
    key: Key | undefined;
}
export interface VNodeData {
    props?: Props;
    attrs?: Attrs;
    class?: Classes;
    style?: VNodeStyle;
    dataset?: Dataset;
    on?: On;
    hero?: Hero;
    attachData?: AttachData;
    hook?: Hooks;
    key?: Key;
    ns?: string;
    fn?: () => VNode;
    args?: Array<any>;
    [key: string]: any;
}
export declare function vnode(sel: string | undefined, data: any | undefined, children: Array<VNode | string> | undefined, text: string | undefined, elm: Element | Text | undefined): VNode;
export default vnode;
